Decl = 'int' | 'float'

Gram ::= { VarDecl | FuncDecl }+ '\0'

FuncDecl  ::=  Decl Var ( { VarDeclInFunc {',', VarDeclInFunc }* }* ) StatBody
Stat      ::=  Loop | If | VarDecl '\n' | FuncCall '\n' |
               'return' { Expr } '\n' | continue '\n' |
               break '\n' | Var = Expr '\n'

Loop      ::=  'while' Cond StatBody
If        ::=  'if' Cond StatBody { 'else if' Cond StatBody }*
                                  { 'else' StatBody }
VarDecl   ::=  Decl Var { = Expr }*
VarDeclInFunc ::= Decl Var

Cond      ::=  '(' LogicExpr ')'
StatBody  ::=  '[' Stat+ ']'

Ineq      ::=  Expr { ['<', '>', '==', '!=', '<=', '>='] Expr }
LogicExpr ::=  And { '||' And }*
And       ::=  Ineq { '&&' Ineq }*

Expr      ::=  Mul  { ['+', '-'] Mul  }*
Mul       ::=  Prim { ['*', '/'] Prim }*
Prim      ::=  ( LogicExpr ) | Num | Var | FuncCall
FuncCall  ::=  Var ( { Expr { [',' Expr] }* }* )
Var       ::=  { ['a' - 'Z', '_'] }+ { ['0' - '9'] }*
Num       ::=  { ['0' - '9'] }+ { '.' ['0' - '9'] }

d.c:11:2: error: expected ‘;’ after struct definition